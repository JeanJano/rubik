<canvas class="threejs absolute top-0 left-0 z-0"></canvas>

<script>
    import * as THREE from 'three';
    import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
    import { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader.js';
    import type { GLTF } from 'three/examples/jsm/loaders/GLTFLoader.js';
    import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';
    import RubiksModel from "../lib/RubiksModel.ts"
    import type { CubeAction } from '../lib/CubeAction';

    const canvas = document.querySelector<HTMLCanvasElement>('.threejs');
    if (!canvas)
        throw new Error("Canvas not found");
    const scene = new THREE.Scene();

    const camera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.z = 2.5;
    
    const renderer = new THREE.WebGLRenderer({ canvas, antialias: true, alpha: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setPixelRatio(2);
    renderer.setClearColor(0xffffff, 0);
    
    const controls = new OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;

    const ambientLight = new THREE.AmbientLight(0xffffff, 4);
    scene.add(ambientLight);
  
    const loader = new GLTFLoader();
    const dracoLoader = new DRACOLoader();
    dracoLoader.setDecoderPath('https://www.gstatic.com/draco/v1/decoders/');
    loader.setDRACOLoader(dracoLoader);

    let model = null;
    let cube: RubiksModel;
    loader.load('/rubikscube.glb', (gltf: GLTF) => {
      model = gltf.scene;
      scene.add(model);
      cube = new RubiksModel(model);
    });

    const mix: CubeAction[] = [
        // {move: "D", clockwise: true},
        // {move: "R", clockwise: true},
        {move: "D", clockwise: false},
        {move: "D", clockwise: false},
        {move: "D", clockwise: false},
        {move: "D", clockwise: false},
        // {move: "R2", clockwise: false},
        // {move: "R2", clockwise: false},
    ]

    window.addEventListener("keydown", (event) => {
        switch (event.key) {
            case 'z':
                console.log(cube.getMix());
                break;
            case ' ':
                cube.reversemove();
                break;
            case 'm':
                cube.shuffle(mix);
                break;
        }
    });

    const labelArray = [
        "front",
        "front'",
        "back",
        "back'",
        "right",
        "right'",
        "left",
        "left'",
        "up",
        "up'",
        "down",
        "down'"
    ];

    for (let i = 0; i < labelArray.length; i++) {
        window.addEventListener(labelArray[i], () => {
            if (i % 2 === 0)
                cube[labelArray[i]]();
            else
                cube[labelArray[i-1]](false);
        })
    }

    window.addEventListener("mix", () => {
        cube.randomMix();
    });

    window.addEventListener("reversemove", () => {
        cube.reversemove();
    });

    window.addEventListener("reversecube", () => {
        cube.reversecube();
    });

    const animate = () => {
      requestAnimationFrame(animate);

      controls.update();
      renderer.render(scene, camera);
    };

    animate();

    canvas.addEventListener("mousedown", (event) => {
        switch (event.button) {
            case 0:
                cube.raycastMiddleCube(event, camera, true);
                break ;
            case 2:
                cube.raycastMiddleCube(event, camera, false);
                break ;
        }
    })

    window.addEventListener('resize', () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    });
  </script>