<canvas class="threejs absolute top-0 left-0 z-0"></canvas>

<script>
    import * as THREE from 'three';
    import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
    import { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader.js';
    import type { GLTF } from 'three/examples/jsm/loaders/GLTFLoader.js';
    import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';
    import RubiksModel from "../lib/RubiksModel.ts"

    const canvas = document.querySelector<HTMLCanvasElement>('.threejs');
    if (!canvas)
        throw new Error("Canvas not found");
    const scene = new THREE.Scene();

    const camera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.z = 5;
    
    const renderer = new THREE.WebGLRenderer({ canvas, antialias: true, alpha: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setClearColor(0xffffff, 1);
    
    const controls = new OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;

    const light = new THREE.HemisphereLight(0xffffff, 0x444444, 5);
    scene.add(light);
  
    const loader = new GLTFLoader();
    const dracoLoader = new DRACOLoader();
    dracoLoader.setDecoderPath('https://www.gstatic.com/draco/v1/decoders/');
    loader.setDRACOLoader(dracoLoader);

    let model = null;
    let cube: RubiksModel;
    loader.load('/rubikscube.glb', (gltf: GLTF) => {
      model = gltf.scene;
      scene.add(model);
      cube = new RubiksModel(model);
    });

    window.addEventListener("keydown", (event) => {
        switch (event.key) {
            case 'u':
                cube.up();
                break;
            case 'f':
                cube.front();
                break;
            case 'b':
                cube.back();
                break;
            case 'd':
                cube.down();
                break;
            case 'r':
                cube.right();
                break;
            case 'l':
                cube.left();
                break;
            case 'z':
                console.log(cube.getMix());
                break;
        }
    });

    window.addEventListener("front", () => {
        cube.front();
    });
    window.addEventListener("front'", () => {
        cube.front(false);
    });
    window.addEventListener("back", () => {
        cube.back();
    });
    window.addEventListener("back'", () => {
        cube.back(false);
    });
    window.addEventListener("right", () => {
        cube.right();
    });
    window.addEventListener("right'", () => {
        cube.right(false);
    });
    window.addEventListener("left", () => {
        cube.left();
    });
    window.addEventListener("left'", () => {
        cube.left(false);
    });
    window.addEventListener("up", () => {
        cube.up();
    });
    window.addEventListener("up'", () => {
        cube.up(false);
    });
    window.addEventListener("down", () => {
        cube.down();
    });
    window.addEventListener("down'", () => {
        cube.down(false);
    });

    const animate = () => {
      requestAnimationFrame(animate);

      controls.update();
      renderer.render(scene, camera);
    };

    animate();

    window.addEventListener('resize', () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    });
  </script>